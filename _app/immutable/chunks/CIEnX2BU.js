import{b as d,c as w,t as b,a as C}from"./CPByfMZ3.js";import{f as T,n as I,C as P,h,j as u,q as m,G as j,ag as D,af as E,k as O,u as R,al as f,am as S,an as y,ao as g,a9 as z}from"./CFUODRKv.js";function k(i,e,s,p,r){var n=i,t="",o;T(()=>{if(t===(t=e()??"")){h&&u();return}o!==void 0&&(P(o),o=void 0),t!==""&&(o=I(()=>{if(h){m.data;for(var a=u(),c=a;a!==null&&(a.nodeType!==8||a.data!=="");)c=a,a=j(a);if(a===null)throw D(),E;d(m,c),n=O(a);return}var v=t+"",l=w(v);d(R(l),l.lastChild),n.before(l)}))})}const _={layout:"video",title:"Composition",link:"https://www.youtube.com/embed/74y6zWZfQKk",videoDate:"2023-04-26T00:00:00.000Z"},{layout:q,title:F,link:G,videoDate:H}=_;var A=b('<h2>Inheritance vs Composition</h2> <p>The main reason this video was made is because I wanted to separate a player’s ground detection from their hitbox (where things like bullets ‘n stuff would hit them). Thus began a journey to break out these two detections in a clean, easy to reuse way, since having every entity implement their own health functionality was pain.</p> <h3>Inheritance Problem</h3> <p>Speaking of health, that was also a major pain point that set me down this path.</p> <p>I had a <code>Player</code> and an <code>Enemy</code> who were both a <code>CharacterBody2D</code> that had health, so I could break them out into an <code>Entity</code> class. For example, it looked something like this:</p> <p>Entity.gd</p> <pre class="language-gdscript"><!></pre> <p>Player.gd</p> <pre class="language-gdscript"><!></pre> <h2>Nodes as components</h2> <h3>Unity</h3> <p>This was around the time that it finally clicked</p>',1);function B(i){var e=A(),s=f(S(e),12),p=y(s);k(p,()=>`<code class="language-gdscript"><span class="token comment"># Entity.gd</span>
<span class="token keyword">class_name</span> <span class="token class-name">Player</span></code>`),g(s);var r=f(s,4),n=y(r);k(n,()=>`<code class="language-gdscript"><span class="token keyword">class_name</span> <span class="token class-name">Player</span>
<span class="token keyword">extends</span> <span class="token class-name">CharacterBody2D</span>

<span class="token keyword">func</span> <span class="token function">_ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">void</span><span class="token punctuation">:</span>
	<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Awawa"</span><span class="token punctuation">)</span></code>`),g(r),z(6),C(i,e)}const K=Object.freeze(Object.defineProperty({__proto__:null,default:B,metadata:_},Symbol.toStringTag,{value:"Module"}));export{K as _};
